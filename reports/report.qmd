
---
title: Homework 8 - World Bank Analysis
---

GITHUB URL: https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-carolyn8420 


# Problem Background


```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx,config = create_db_wrapper( config_map )
  
```


```{python}
# Do a quick test of the connection and trap the errors better!

run_sql_and_return_html(cnx,"""
select
  table_schema, table_name, table_rows
from
  information_schema.tables
where
  table_schema in ('world_bank_data')
""")

```

# Exercises

In the following exercises, write the SQL as requested to discover the answer.

## Task 1


How many records are in the country table?


```{python}
# How many records are in the world_bank_data.wdi_country table?
# (skills: select, aggregate)


run_sql_and_return_df(cnx,"""
select
 count(*) as "Row Count"
from
 world_bank_data.wdi_country
""")


```


## Task 2


Explore the first 5 records in the country table.


```{python}
## write out the first 10 records and look at the columns
## Do you see any blanks or missing data?
## (skills: select, limit)


run_sql_and_return_html(cnx,"""
select
 *
from
 world_bank_data.wdi_country
limit 5
""")


```




## Task 3


List all non-countries.


```{python}
## task 3
## Which records are NOT for countries, that is they're for regions or groups of countries.
## How can you tell?
## Once you figure it out, write a query to list all the non-countries
## (skills: select, where)


run_sql_and_return_html(cnx,"""
select
 `Short Name`
from
 world_bank_data.wdi_country
where
 region is NULL


""")
```


## Task 4


Create your own copy of WDI_Country containing just countries.


```{python}
## task 4
## The WDI table clearly contains information for countries and non-countries
## using CREATE TABLE ... SELECT from WHERE syntax.
## Finally, below write a query to return the number
## of records in the new table.
## (skills: select, aggregate)


# drop table
execute_ddl(cnx,"""
drop table if exists wdi_country;
drop table if exists peopleroles
drop table if exists peopleskills;
drop table if exists roles;
drop table if exists people;
drop table if exists skills;
""")
```


```{python}
# create table
execute_ddl(cnx,"""
CREATE table wdi_country as
select
 *
from
 world_bank_data.wdi_country
where
 not region is NULL;


""")
```


```{python}
# show number of records
run_sql_and_return_html(cnx,"""
select count(*) from wdi_country
""")
```


## Task 5


According to the World Bank, in 2020 there were how many countries in the world?


```{python}
## (skills: select, aggregate)


run_sql_and_return_html(cnx,"""
select count(*) from wdi_country;
""")


```


## Task 6


What are all unique values of region in the wdi_country table?


```{python}
## Let's investigate the country_region field.
## What is the domain of the country_region field? That is,
## what are the unique values found there?
## (there are several possible ways to code this in SQL)
## (skills: select, aggregate, order by)


run_sql_and_return_df(cnx,"""
select
  region
from
  wdi_country
group by
  region
order by
  region


""")


```


## Task 7


How many countries are in each region?


```{python}
## How many countries are in each region?
## (skills: select, aggregate, group by, order by)


run_sql_and_return_df(cnx,"""
select
  region,
  count(region) as "# Countries"
from
  wdi_country
group by
  region
order by
  region
""")


```


## Task 8


List the country full names and regions for all countries in north america.


```{python}
## List the country full names and regions for all countries in north america
## (skills: select, where, order by)


run_sql_and_return_df(cnx,"""
select
  region,
  `Long Name`
from
  wdi_country
where
  region in ('North America')
order by
   region

""")


```


## Task 9


```{python}
## The last World Cup soccer tournament was hosted by Qatar.
## What region contains Qatar?  List the region, country short name and full name
## (skills: select, where)


run_sql_and_return_df(cnx,"""
select
  region,
  `Short Name` ,
  `Long Name`
from
  wdi_country
where
  `Short Name` = 'Qatar'
""")


```


## Task 10


```{python}
## There are two abbreviation fields in the data country_abbr and country_wb_abbr.
## List the country code, short name, abbr, wb_abbr and region for all the countries
## where the abbr and wb_abbr are different.
## (skills: select, where, order by)


run_sql_and_return_html(cnx,"""
select `Country Code`, `Short Name`, `2-alpha code`, `WB-2 code`,`Region`
from wdi_country
where
 `2-alpha code` <> `WB-2 code`
""")


```


## Task 11


```{python}
## Now, let's investigate the "income category" field.
## List the income categories and the number of countries in each
## income category in descending order of most countries to least.
## (skills: select, aggregate, group by, order by)


run_sql_and_return_df(cnx,"""
select
  `Income Group` ,
  count(*)
from
  wdi_country
group by
  `Income Group`
order by
  count(*) desc,
  `Income Group`
""")


```


## Task 12


```{python}
## Mystery task.  Looking at the table from Task 11 (anything odd?) write the
## next obvious query based on the results in the table.
## At a minimum, your query should put country short name in the first column.
## you will be scored on the number of records returned and the value(s)
## in the first column.


run_sql_and_return_html(cnx,"""
SELECT
  `Short Name`,
  region,
  `Income Group`
FROM
  wdi_country
WHERE
  `Income Group` IS NULL AND region IS NOT NULL
ORDER BY
  region;
""")


```


## Task 13


```{python}
## OK, this HAS to be an error. Let's make a assumption that the country
## in question, because they are oil-rich, are "high income". 
## Write an update comment to correct the issue.
## NOTE - if you get this wrong, all subsequent tables will be wrong!


execute_ddl(cnx,"""
UPDATE wdi_country
SET `Income Group` = 'High income'
WHERE `Income Group` IS NULL;
""")


```
```{python}
## Now, display the country again to verify the change stuck!


run_sql_and_return_html(cnx,"""
select
  `Short Name` ,
  region,
  `Income Group`
from
  wdi_country
where
  `Short Name` = 'Venezuela'
""")

```


## Task 14


```{python}
## Write a single query that show the number of countries in each
## "Region"-"Income Group" pair.  The table should have 3 columns:
## region, income group, and no.of.countries.
## (skills: select, aggregate, group by, order by)


run_sql_and_return_df(cnx,"""
SELECT
  region,
  `Income Group` AS income_group,
  count(*) AS no_of_countries
FROM
  wdi_country
WHERE
  region IS NOT NULL AND `Income Group` IS NOT NULL
GROUP BY
  region, `Income Group`
ORDER BY
  region, `Income Group`;
""")


```


## Task 15


```{python}
## Examine the result from task 14. It would be really cool to
## present the results of this table in a 2-D form, with
## columns for each income category (high, upper middle, lower middle, low, other)
## regions down the side, and the pair-wise count inside each cell.
## Using CASE statements, DO IT!  BE SURE to include the countries without
## an income category.


## HINT - your query should return 6 columns: the region name, one
## column for each of the income categories (e.g., High, Upper middle, etc.)
## and a column for the row totals.
## (skills: select, aggregate, group by, nested query)


run_sql_and_return_df(cnx,"""
SELECT
  region,
  SUM(CASE WHEN `Income Group` = 'Low income' THEN 1 ELSE 0 END) AS `Low Income`,
  SUM(CASE WHEN `Income Group` = 'Lower middle income' THEN 1 ELSE 0 END) AS `Low Middle`,
  SUM(CASE WHEN `Income Group` = 'Upper middle income' THEN 1 ELSE 0 END) AS `Upper Middle`,
  SUM(CASE WHEN `Income Group` = 'High income' THEN 1 ELSE 0 END) AS `High Income`,
  SUM(1) AS "Row Total"
FROM
  wdi_country
GROUP BY
  region
ORDER BY
  region;
""")


```


## Task 16


```{python}
## Wow! what a cool table!  It is very interesting to see where the money
## sits around the world.  Using the general approach from Task 14 above
## and write a query to return the single region with the most lower-income
## countries.


## Your query should return 3 columns, the number of
## low-income countries, the region name and the income group


## PUT THE NUMBER FIRST! (use: count, region name, income group)
## (skills: select, aggregate, group by, nested query, order by, limit)


run_sql_and_return_html(cnx,"""
select
  count(*),
  region,
  `Income Group`
from
  wdi_country
where
  `Income Group` = 'Low Income'
group by
  region,
  `Income Group`
order by
  count(*) desc
limit
  1
""")


```


## Task 17


```{python}
## Are you getting the hand of this? Good! We need to take a look at all
## the countries in the same region and with the same income category as
## the Marshall Islands.
## For each country that matches, print their country code, short name,
## region and income category, by order of their short name.  As a hint,
## the country code for the Marshall Islands is MHL.
## (skills: select, where, subquery)


run_sql_and_return_html(cnx,"""
select
  `Country Code`,
  `Short Name`,
  region,
  `Income Group`
from
  wdi_country
where
  1=1
  and `Income Group` = (select `Income Group` from wdi_country where `Country Code`='MHL')
  and region = (select region from wdi_country where `Country Code`='MHL')
order by
  `Short Name`
""")


```


## Task 18


```{python}
## OK - let's raise the heat in the kitchen! Review the output from task 14.
## You'll see that some of the regions do not contain all of the income
## levels.  For example, the Europe & Central Asia region does not have
## any low income countries.
##
## CHALLENGE - using a SINGLE SQL statement, write a table that contains every
## combination of region and income category (including the missing '') values!
##
## THEN add a WHERE clause to only show the values that were missing from
## the original pairings!
##
## HINT - there should be AT MOST [# of regions]x[# of income cats] = 28
## rows in your final table, and there are 22 rows returned in the query
## in Task 14.  (FYI - I get 6 rows in my final table.)
## (skills: select, where, subqueries, joins)


run_sql_and_return_html(cnx,"""
with region_cte as (
    select region
    from wdi_country
    group by region
),
income_cte as (
    select `Income Group`
    from wdi_country
    where `Income Group` is not NULL
    group by `Income Group`
),
pair_cte as (
    select *
    from region_cte, income_cte
),
merge_cte as (
    select
       a.region, a.`Income Group`, count(b.`Short Name`) as Num_Countries
    from pair_cte a
    left join wdi_country b on (
            a.region = b.region
            and a.`Income Group` = b.`Income Group`
        )
    group by 
    a.region, a.`Income Group`
)
select *
from merge_cte
where 
    Num_Countries = 0;

""")


```


## Task 19


```{python}
## Hot enough, yet?  Let's go for ghost-pepper HOT!  Now let's build some
## percentage tables.  For example, across the entire sample, what
## is the percentage of total countries in each income category?
##
## As a first step, build off the result from task 14 and create a table with
## six columns (region, income cat, country count, sum of countries in region,
## sum of countries by income and total sum countries).
##
## THEN, add a 7th column calculating the percent of total for each,
## region-income pair.
##
## actually calculating percentages and print out a table will be a
## slam dunk after this!
## (skills: select, where, subqueries, joins, aggregate functions)


run_sql_and_return_html(cnx,"""
WITH 
region_cte AS (
    SELECT region, COUNT(*) AS region_cnt 
    FROM wdi_country
    GROUP BY region
), 
income_cte AS (
    SELECT `Income Group`, COUNT(*) AS income_cnt
    FROM wdi_country
    GROUP BY `Income Group`
), 
total_cte AS (
    SELECT COUNT(*) AS total_cnt
    FROM wdi_country
), 
pair_cte AS (
    SELECT
        region,
        `Income Group`,
        COUNT(*) AS pair_cnt
    FROM
        wdi_country
    GROUP BY
        region, `Income Group`
), 
merge_cte AS (
    SELECT
        a.region,
        a.`Income Group`,
        a.pair_cnt,
        b.region_cnt,
        c.income_cnt,
        d.total_cnt,
        ROUND((100.0 * a.pair_cnt / d.total_cnt), 1) AS `Pct of Total`
    FROM
        pair_cte a
        LEFT JOIN region_cte b ON a.region = b.region
        LEFT JOIN income_cte c ON a.`Income Group` = c.`Income Group`
        CROSS JOIN total_cte d
)
SELECT * FROM merge_cte
ORDER BY region, `Income Group`;

""")

```


## Task 20


```{python}
## SLAM DUNK TIME!  Using the resulting table CTEs from Task 19,
## print table similar to the table in Task 15, with Income group in the
## columns, Region in the rows and Percent of total in each cell of the table.


run_sql_and_return_html(cnx,"""
WITH 
region_cte AS (
    SELECT region, COUNT(*) AS region_cnt 
    FROM wdi_country 
    GROUP BY region
), 
income_cte AS (
    SELECT `Income Group`, COUNT(*) AS income_cnt 
    FROM wdi_country 
    GROUP BY `Income Group`
), 
total_cte AS (
    SELECT COUNT(*) AS total_cnt 
    FROM wdi_country
), 
pair_cte AS (
    SELECT
        region,
        `Income Group`,
        COUNT(*) AS pair_cnt
    FROM
        wdi_country
    GROUP BY
        region, `Income Group`
), 
merge_cte AS (
    SELECT
        a.region,
        a.`Income Group`,
        a.pair_cnt,
        b.region_cnt,
        c.income_cnt AS income_cnt,  -- corrected alias
        d.total_cnt,
        100.0 * a.pair_cnt / d.total_cnt AS pct
    FROM
        pair_cte a
        LEFT JOIN region_cte b ON a.region = b.region
        LEFT JOIN income_cte c ON a.`Income Group` = c.`Income Group`
        CROSS JOIN total_cte d
)
SELECT
    region,
    ROUND(SUM(CASE WHEN `Income Group` = 'Low income' THEN pct ELSE 0 END), 1) AS `Low Income`,
    ROUND(SUM(CASE WHEN `Income Group` = 'Lower middle income' THEN pct ELSE 0 END), 1) AS `Low Middle`,
    ROUND(SUM(CASE WHEN `Income Group` = 'Upper middle income' THEN pct ELSE 0 END), 1) AS `Upper Middle`,
    ROUND(SUM(CASE WHEN `Income Group` = 'High income' THEN pct ELSE 0 END), 1) AS `High Income`,
    ROUND(SUM(pct), 1) AS `Row Total`
FROM
    merge_cte
GROUP BY
    region
ORDER BY
    region;
""")


```


## Task 21


```{python}
## ANOTHER DUNK!  Using the resulting table CTEs from Task 19,
## print a table listing the number, totals and percentage of countries
## by income category.


## (This is much simpler than task 20!)


run_sql_and_return_df(cnx,"""
WITH 
income_cte AS (
    SELECT `Income Group`, COUNT(*) AS income_cnt
    FROM wdi_country
    GROUP BY `Income Group`
),
total_cte AS (
    SELECT COUNT(*) AS total_cnt
    FROM wdi_country
)
SELECT
    `Income Group`,
    income_cnt,
    total_cnt,
    ROUND(100.0 * income_cnt / total_cnt, 1) AS `Pct of Total`
FROM
    income_cte,
    total_cte
ORDER BY
    `Income Group`;
""")


```


# Reflection

I feel pretty confident in my ability to write basic SQL queries, especially SELECT statements, and using WHERE clauses to filter data. I'm also comfortable with JOINs, particularly INNER JOINs, to link related tables. However, I think I could use more practice with more advanced SQL concepts, like subqueries and window functions. Some of the queries that required nested SELECT statements were a bit tricky, and I had to spend some time getting the logic right. I also need to get more comfortable with optimizing queries for performance, especially when working with larger datasets. This assignment definitely helped my skills in working with databases, especially in designing and structuring tables with DDL, running queries to retrieve meaningful data, and displaying it in a clear format.

To tackle the more complex tasks I start by carefully analyzing the problem and breaking it down into smaller, manageable subtasks. I focus on understanding the data relationships and any constraints, then plan my approach by outlining the necessary steps, such as querying missing data or calculating percentages. I implement the solution step-by-step, testing along the way to catch errors. When challenges arise, like missing data or performance issues, I use SQL techniques to handle them efficiently. I would write an SQL query to find any missing combinations of region and income group. I’d then check the results for correctness. I would also generate the percentage tables first by calculating the total counts for each region and income group, then calculating the percentages. I verify the results and reflect on any improvements for future tasks, ensuring the solution is both accurate and optimized.

The biggest takeaways from this assignment were understanding data relationships, SQL queries for data manipulation, and using transformations to analyze data efficiently. I learned how to perform complex operations like aggregation, filtering, and updating data, as well as dealing with missing or inconsistent data. These skills will be helpful in real-world scenarios, especially when working with large datasets or managing databases in business, research, or software development. In future coursework, the ability to apply SQL for data analysis will help with tasks like building databases, optimizing queries, and performing in-depth analysis for projects.


# README


::: {style="background:lightgray; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::